# Generated by Django 4.2 on 2023-05-21 09:30

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('course', models.JSONField(default=list, null=True)),
                ('salary', models.IntegerField(null=True)),
                ('graduation_rate', models.FloatField(default=0.0, null=True)),
                ('cost_0_to_30k', models.IntegerField(null=True)),
                ('cost_30_to_48k', models.IntegerField(null=True)),
                ('cost_48_to_75k', models.IntegerField(null=True)),
                ('cost_75_to_110k', models.IntegerField(null=True)),
                ('cost_110k_plus', models.IntegerField(null=True)),
                ('student_size', models.IntegerField(null=True)),
                ('location', models.CharField(max_length=255)),
                ('acceptance_rate', models.FloatField(default=0.0, null=True)),
                ('grescore', models.FloatField(default=0.0, null=True)),
                ('tuition', models.FloatField(default=0.0, null=True)),
                ('link', models.CharField(default='#', max_length=255)),
                ('toefl', models.IntegerField(null=True)),
                ('ielts', models.IntegerField(null=True)),
                ('cs_salary', models.IntegerField(null=True)),
                ('datascience_salary', models.IntegerField(null=True)),
                ('MBA_salary', models.IntegerField(null=True)),
                ('logo', models.CharField(default='None', max_length=50)),
                ('MBA_cost', models.IntegerField(null=True)),
                ('CSE_cost', models.IntegerField(null=True)),
                ('DataScience_cost', models.IntegerField(null=True)),
                ('country', models.CharField(default='USA', max_length=50)),
                ('hostelandmeals', models.IntegerField(null=True)),
                ('transportation', models.IntegerField(null=True)),
                ('personal', models.IntegerField(null=True)),
                ('gate', models.IntegerField(null=True)),
                ('cat', models.IntegerField(null=True)),
                ('books', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('desc', models.CharField(max_length=50)),
                ('amount', models.FloatField(max_length=255)),
                ('deadline', models.CharField(max_length=50)),
                ('link', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
